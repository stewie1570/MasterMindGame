@{
    ViewBag.Title = "Index";
}

<script type="text/javascript">

    var constants = {
        guessColors: ["empty", "red", "blue", "green", "yellow", "purple"],
        resultColors: ["red", "white", "empty"]
    };

    var GameViewModel = function (serverVm)
    {
        var self = this;
        this.initialServerVM = serverVm;
        this.serverVm = ko.observable(serverVm);
        this.currentGuess = ko.observableArray([]);
        this.guessWidth = ko.observable(null);
        this.maxAttempts = ko.observable(null);
        this.isSetup = ko.observable(false);

        this.pegAction = function (peg)
        {
            if (constants.guessColors.indexOf(peg) >= 0)
            {
                if (self.currentGuess().length < self.guessWidth())
                    self.currentGuess.push(peg);
            }
            else
                self.currentGuess.pop();
        };

        this.reset = function ()
        {
            self.serverVm(self.initialServerVM);
            self.currentGuess([]);
            self.isSetup(false);
        }

        this.sendGuess = function ()
        {
            var guessCSV = self
                        .helpers
                        .select(self.currentGuess(), function (guess)
                        {
                            return guess[0];
                        }).toString();
            var guess = self.helpers.replaceAll(guessCSV, ',', '');

            $.post("Home/Guess", { guess: guess })
                .done(function (data)
                {
                    self.serverVm(data); self.currentGuess([]);
                });
        }

        this.setupGame = function ()
        {
            $.post("Home/Setup", { width: self.guessWidth(), maxAttempts: self.maxAttempts() })
                .success(function () { self.isSetup(true);})
        }

        this.helpers = {
            select: function (array, del)
            {
                var ret = [];
                for (var i = 0; i < array.length; i++)
                {
                    ret.push(del(array[i]));
                }
                return ret;
            },

            replaceAll: function (str, find, replacement)
            {
                return str.split(find).join(replacement);
            }
        };
    };


    $(document).ready(function ()
    {
        var initial = { "Results": [], "IsOver": false, "IsAWin": false };

        ko.applyBindings(new GameViewModel(initial));
    });
</script>

<div data-bind="visible: !isSetup()">
    <table>
        <tr>
            <th>Guess Width</th>
            <td><input type="text" data-bind="value: guessWidth" /></td>
        </tr>
        <tr>
            <th>Max Attempts</th>
            <td><input type="text" data-bind="value: maxAttempts" /></td>
        </tr>
        <tr>
            <td colspan="2" align="right">
                <button data-bind="click: setupGame">Setup Game</button>
            </td>
        </tr>
    </table>
</div>

<div class="result-outer-container" data-bind="visible: isSetup() && !serverVm().IsOver">
    <div data-bind="foreach: serverVm().Results">
        <!-- ko foreach: Guess -->
        <div data-bind="style: {backgroundColor: constants.guessColors[$data]}" class="guess-peg">
        </div>
        <!-- /ko -->
        <!-- ko foreach: Result -->
        <div data-bind="style: {backgroundColor: constants.resultColors[$data]}" class="result-peg">
        </div>
        <!-- /ko -->

        <div class="clear"></div>
    </div>
</div>

<div class="guess-outer-container" data-bind="visible: isSetup() && !serverVm().IsOver">
    <div>
        <!-- ko foreach: currentGuess -->
        <div data-bind="style: {backgroundColor: $data}" class="guess-peg">
        </div>
        <!-- /ko -->

        <span data-bind="click: sendGuess, visible: currentGuess().length == guessWidth()" class="command">&lt;Send&gt;</span>
    </div>
    
    <div class="clear"></div>

    <div>
        <!-- ko foreach: constants.guessColors -->
        <div data-bind="style: {backgroundColor: $data}, click: $parent.pegAction" class="guess-peg command">
        </div>
        <!-- /ko -->

        <span data-bind="click: pegAction" class="command">&lt;Backspace&gt;</span>
    </div>

    <div class="clear"></div>
</div>

<h2 data-bind="visible: serverVm().IsOver && serverVm().IsAWin">You Win</h2>
<h2 data-bind="visible: serverVm().IsOver && !serverVm().IsAWin">You Lost</h2>

<div data-bind="click: reset, visible: serverVm().IsOver" class="command">&lt;Reset&gt;</div>
